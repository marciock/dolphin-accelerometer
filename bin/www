#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('golfinho:server');
const fs=require('fs');
//const http = require('http');
const https=require('https');



let key= fs.readFileSync('encrypt/server.key');
let cert=fs.readFileSync('encrypt/server.cert');

let options={
  key:key,
  cert:cert
}




/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//const server = http.createServer(app);

const server=https.createServer(options,app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

const io=require('socket.io')(server);
let horizontal=0;
let vertical=0;
const get=(value)=>{
  return value
}
io.on('connection',socket=>{
   // visitas ++;
   // console.log(visitas)
socket.on('beta',data=>{
  console.log(data)
  vertical=data;
  socket.emit('dowup',vertical);
socket.broadcast.emit('dowup',vertical);
})

socket.on('alfa',data=>{
  
  console.log(data)
  horizontal=data;

  socket.emit('leftright',horizontal);
  socket.broadcast.emit('leftright',horizontal);
})




socket.emit('leftright',horizontal);
socket.broadcast.emit('leftright',horizontal);
  
  //socket.broadcast.emit('command',visitas)
})



function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
